<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>interview on Nikita Galaiko</title>
    <link>https://galaiko.rocks/tags/interview/</link>
    <description>Recent content in interview on Nikita Galaiko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Sep 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://galaiko.rocks/tags/interview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Daily Coding Problem #23</title>
      <link>https://galaiko.rocks/posts/dcp/maze/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/maze/</guid>
      <description>Problem You are given an M by N matrix consisting of booleans that represents a board. Each True boolean represents a wall. Each False boolean represents a tile you can walk on.
Given this matrix, a start coordinate, and an end coordinate, return the minimum number of steps required to reach the end coordinate from the start. If there is no possible path, then return null. You can move up, left, down, and right.</description>
    </item>
    
    <item>
      <title>Daily Coding Problem #15</title>
      <link>https://galaiko.rocks/posts/dcp/probability/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/probability/</guid>
      <description>Today problem is a probability problem.
Problem This problem was asked by Facebook.
Given a stream of elements too large to store in memory, pick a random element from the stream with uniform probability.
Solution There are many variations of such problems, and before solving it, I want to show some basic examples that I met.
Most trivial one is picking one random element from an array.
Every programming language has a function to generate a pseudo-random number (int or float) within the given range.</description>
    </item>
    
    <item>
      <title>Daily Coding Problem: Boring</title>
      <link>https://galaiko.rocks/posts/dcp/boring/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/boring/</guid>
      <description>Problem Hardest problem to solve so far: describing 30min trivial problems turned out to be much less fun than I imagined.
 Problem #8: binary tree (fun, but always same) Problem #9: array operations (boring and always same) Problem #10: go basics (3 lines wtf) Problem #11: a search tree Problem #12: recursive algorithm (always same, sometimes hard to detect) Problem #13: string operations (super lame)  I will keep updating GitHub, but not sure about the website.</description>
    </item>
    
    <item>
      <title>Daily Coding Problem: Problem #7</title>
      <link>https://galaiko.rocks/posts/dcp/problem-7/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/problem-7/</guid>
      <description>Problem This problem was asked by Facebook.
Given the mapping a = 1, b = 2, &amp;hellip; z = 26, and an encoded message, count the number of ways it can be decoded.
For example, the message &amp;lsquo;111&amp;rsquo; would give 3, since it could be decoded as &amp;lsquo;aaa&amp;rsquo;, &amp;lsquo;ka&amp;rsquo;, and &amp;lsquo;ak&amp;rsquo;.
You can assume that the messages are decodable. For example, &amp;lsquo;001&amp;rsquo; is not allowed.
Solution Firstly, let&amp;rsquo;s take care of a mapping.</description>
    </item>
    
    <item>
      <title>Daily Coding Problem: Problem #5</title>
      <link>https://galaiko.rocks/posts/dcp/problem-5/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/problem-5/</guid>
      <description>Problem This problem was asked by Jane Street.
cons(a, b) constructs a pair, and car(pair) and cdr(pair) returns the first and last element of that pair. For example, car(cons(3, 4)) returns 3, and cdr(cons(3, 4)) returns 4.
Given this implementation of cons:
def cons(a, b): def pair(f): return f(a, b) return pair Implement car and cdr.
Solution The main difficulty with functional programming when you are used to object-oriented is that you don&amp;rsquo;t have clear names for things that are happening (try to explain to anyone what monad is).</description>
    </item>
    
    <item>
      <title>Daily Coding Problem: Problem #4</title>
      <link>https://galaiko.rocks/posts/dcp/problem-4/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/problem-4/</guid>
      <description>Problem This problem was asked by Stripe.
Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.
For example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.
You can modify the input array in-place.</description>
    </item>
    
    <item>
      <title>Daily Coding Problem: Problem #3</title>
      <link>https://galaiko.rocks/posts/dcp/problem-3/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/problem-3/</guid>
      <description>Problem This problem was asked by Google.
Given the root to a binary tree, implement serialize(root), which serializes the tree into a string, and deserialize(s), which deserializes the string back into the tree.
For example, given the following Node class
class Node: def init(self, val, left=None, right=None): self.val = val self.left = left self.right = right The following test should pass:
node = Node(&amp;lsquo;root&amp;rsquo;, Node(&amp;lsquo;left&amp;rsquo;, Node(&amp;lsquo;left.left&amp;rsquo;)), Node(&amp;lsquo;right&amp;rsquo;)) assert deserialize(serialize(node)).left.left.val == &amp;lsquo;left.</description>
    </item>
    
    <item>
      <title>Daily Coding Problem: Problem #2</title>
      <link>https://galaiko.rocks/posts/dcp/problem-2/</link>
      <pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/problem-2/</guid>
      <description>Problem This problem was asked by Uber.
Given an array of integers, return a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i.
For example, if our input was [1, 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. If our input was [3, 2, 1], the expected output would be [2, 3, 6].</description>
    </item>
    
    <item>
      <title>Daily Coding Problem: Problem #1</title>
      <link>https://galaiko.rocks/posts/dcp/problem-1/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/problem-1/</guid>
      <description>Problem This problem was recently asked by Google.
Given a list of numbers and a number k, return whether any two numbers from the list add up to k.
For example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17.
Bonus: Can you do this in one pass?
Solution If we want to find the sum of every combination of two array elements most obvious way is to create two for loops over an array and check if they satisfy our condition.</description>
    </item>
    
    <item>
      <title>Daily Coding Problem</title>
      <link>https://galaiko.rocks/posts/dcp/intro/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/intro/</guid>
      <description>Recently found this website Daily Coding Problem, where you can subscribe to a newsletter and get one problem a day.
For a long time, I wanted to start solving problems from leetcode to keep fit, but could never begin.
Also, for a long time, I wanted to start a blog, but could never begin.
Writing short articles about how I solve thus problems seems for me as an excellent opportunity to start doing both, so every day I will publish my solution for the daily problem here, and to my GitHub page trying to explain why and how I solved it.</description>
    </item>
    
  </channel>
</rss>
