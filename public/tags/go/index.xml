<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Nikita Galaiko</title>
    <link>https://galaiko.rocks/tags/go/</link>
    <description>Recent content in go on Nikita Galaiko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 May 2019 11:01:45 +0200</lastBuildDate><atom:link href="https://galaiko.rocks/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Words Count</title>
      <link>https://galaiko.rocks/posts/blog/words-count/</link>
      <pubDate>Sat, 11 May 2019 11:01:45 +0200</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/words-count/</guid>
      <description>Last week I participated in a small competiotion at work. The goal was to calculate the top 10 the most common words in a file and print them with number of occurences. For testing we used export from HackerNews comments from 2012 until today, and that file was 4GB.
I will describe what optimizations I used to solve the problem from the most to the least obvious.
Solution was measured on MacBook Pro 2018 with 2,2 GHz Intel Core i7 CPU and 32 GB RAM.</description>
    </item>
    
    <item>
      <title>Forced wrapper interface</title>
      <link>https://galaiko.rocks/posts/blog/interface-wrapper/</link>
      <pubDate>Sun, 24 Mar 2019 10:03:39 +0100</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/interface-wrapper/</guid>
      <description>Let&amp;rsquo;s take this interface as an example:
type Block interface { Chain(Block) (string, error) } I want to make sure that input Block is always valid, and the output string is never empty if the error is nil. How can I do that? There are a couple of options.
The first option is to rely on every implementation to validate it, but it means a boilerplate code that is easy to miss.</description>
    </item>
    
    <item>
      <title>Building a peer to peer messenger</title>
      <link>https://galaiko.rocks/posts/blog/peer-to-peer/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/peer-to-peer/</guid>
      <description>The idea of a peer to peer something is to create a system that doesn&amp;rsquo;t require any centralized server to operate. In the case of a messenger, two users should be able to communicate directly between each other until at least one of their instances is running.
That&amp;rsquo;s why the most important part of such systems is a discovery. If peers can&amp;rsquo;t find each other, it&amp;rsquo;s useless.
The first problem is to build a messenger app, that can discover the same apps in the network and securely communicate with each other.</description>
    </item>
    
    <item>
      <title>Golang: Data races</title>
      <link>https://galaiko.rocks/posts/blog/go-data-races/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/go-data-races/</guid>
      <description>I have noticed that many people who have started using go have troubles when it comes to concurrent programming. Concurrency in go is indeed the most complicated part of the language, especially for people who don&amp;rsquo;t have much experience working with it. There are no compile time validations to prevent a programmer from creating race conditions, but go provides all the needed tools and instruments to avoid it.
I will try to explain what is a race condition, why does it happen and how to avoid it.</description>
    </item>
    
    <item>
      <title>Optimizing a function</title>
      <link>https://galaiko.rocks/posts/blog/optimizing-functions/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/optimizing-functions/</guid>
      <description>In the golang community slack, someone shared a link to a package used to validate Swedish personnumer. Personnumer is a swedish version of an ID, and its format is well defined:
 First 6 or 8 digits is a birthrate with or without a century. Last four digits are random secret digits. The whole number satisfies the Luhn algorithm. Birthdate and secret digits can be divided with - or +.  For example 19900101-0017</description>
    </item>
    
    <item>
      <title>Daily Coding Problem #23</title>
      <link>https://galaiko.rocks/posts/dcp/maze/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/maze/</guid>
      <description>Problem You are given an M by N matrix consisting of booleans that represents a board. Each True boolean represents a wall. Each False boolean represents a tile you can walk on.
Given this matrix, a start coordinate, and an end coordinate, return the minimum number of steps required to reach the end coordinate from the start. If there is no possible path, then return null. You can move up, left, down, and right.</description>
    </item>
    
    <item>
      <title>Daily Coding Problem #15</title>
      <link>https://galaiko.rocks/posts/dcp/probability/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/probability/</guid>
      <description>Today problem is a probability problem.
Problem This problem was asked by Facebook.
Given a stream of elements too large to store in memory, pick a random element from the stream with uniform probability.
Solution There are many variations of such problems, and before solving it, I want to show some basic examples that I met.
Most trivial one is picking one random element from an array.
Every programming language has a function to generate a pseudo-random number (int or float) within the given range.</description>
    </item>
    
    <item>
      <title>Daily Coding Problem: Boring</title>
      <link>https://galaiko.rocks/posts/dcp/boring/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/boring/</guid>
      <description>Problem Hardest problem to solve so far: describing 30min trivial problems turned out to be much less fun than I imagined.
 Problem #8: binary tree (fun, but always same) Problem #9: array operations (boring and always same) Problem #10: go basics (3 lines wtf) Problem #11: a search tree Problem #12: recursive algorithm (always same, sometimes hard to detect) Problem #13: string operations (super lame)  I will keep updating GitHub, but not sure about the website.</description>
    </item>
    
    <item>
      <title>Daily Coding Problem: Problem #7</title>
      <link>https://galaiko.rocks/posts/dcp/problem-7/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/problem-7/</guid>
      <description>Problem This problem was asked by Facebook.
Given the mapping a = 1, b = 2, &amp;hellip; z = 26, and an encoded message, count the number of ways it can be decoded.
For example, the message &amp;lsquo;111&amp;rsquo; would give 3, since it could be decoded as &amp;lsquo;aaa&amp;rsquo;, &amp;lsquo;ka&amp;rsquo;, and &amp;lsquo;ak&amp;rsquo;.
You can assume that the messages are decodable. For example, &amp;lsquo;001&amp;rsquo; is not allowed.
Solution Firstly, let&amp;rsquo;s take care of a mapping.</description>
    </item>
    
    <item>
      <title>Daily Coding Problem: Problem #5</title>
      <link>https://galaiko.rocks/posts/dcp/problem-5/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/problem-5/</guid>
      <description>Problem This problem was asked by Jane Street.
cons(a, b) constructs a pair, and car(pair) and cdr(pair) returns the first and last element of that pair. For example, car(cons(3, 4)) returns 3, and cdr(cons(3, 4)) returns 4.
Given this implementation of cons:
def cons(a, b): def pair(f): return f(a, b) return pair Implement car and cdr.
Solution The main difficulty with functional programming when you are used to object-oriented is that you don&amp;rsquo;t have clear names for things that are happening (try to explain to anyone what monad is).</description>
    </item>
    
  </channel>
</rss>
