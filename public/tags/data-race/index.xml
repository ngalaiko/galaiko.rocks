<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data race on Nikita Galaiko</title>
    <link>https://galaiko.rocks/tags/data-race/</link>
    <description>Recent content in data race on Nikita Galaiko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://galaiko.rocks/tags/data-race/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang: Data races</title>
      <link>https://galaiko.rocks/posts/blog/go-data-races/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/go-data-races/</guid>
      <description>I have noticed that many people who have started using go have troubles when it comes to concurrent programming. Concurrency in go is indeed the most complicated part of the language, especially for people who don&amp;rsquo;t have much experience working with it. There are no compile time validations to prevent a programmer from creating race conditions, but go provides all the needed tools and instruments to avoid it.
I will try to explain what is a race condition, why does it happen and how to avoid it.</description>
    </item>
    
  </channel>
</rss>
