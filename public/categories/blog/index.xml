<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Nikita Galaiko</title>
    <link>https://galaiko.rocks/categories/blog/</link>
    <description>Recent content in Blog on Nikita Galaiko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 May 2019 11:01:45 +0200</lastBuildDate><atom:link href="https://galaiko.rocks/categories/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Words Count</title>
      <link>https://galaiko.rocks/posts/blog/words-count/</link>
      <pubDate>Sat, 11 May 2019 11:01:45 +0200</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/words-count/</guid>
      <description>Last week I participated in a small competiotion at work. The goal was to calculate the top 10 the most common words in a file and print them with number of occurences. For testing we used export from HackerNews comments from 2012 until today, and that file was 4GB.
I will describe what optimizations I used to solve the problem from the most to the least obvious.
Solution was measured on MacBook Pro 2018 with 2,2 GHz Intel Core i7 CPU and 32 GB RAM.</description>
    </item>
    
    <item>
      <title>Forced wrapper interface</title>
      <link>https://galaiko.rocks/posts/blog/interface-wrapper/</link>
      <pubDate>Sun, 24 Mar 2019 10:03:39 +0100</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/interface-wrapper/</guid>
      <description>Let&amp;rsquo;s take this interface as an example:
type Block interface { Chain(Block) (string, error) } I want to make sure that input Block is always valid, and the output string is never empty if the error is nil. How can I do that? There are a couple of options.
The first option is to rely on every implementation to validate it, but it means a boilerplate code that is easy to miss.</description>
    </item>
    
    <item>
      <title>Building a peer to peer messenger</title>
      <link>https://galaiko.rocks/posts/blog/peer-to-peer/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/peer-to-peer/</guid>
      <description>The idea of a peer to peer something is to create a system that doesn&amp;rsquo;t require any centralized server to operate. In the case of a messenger, two users should be able to communicate directly between each other until at least one of their instances is running.
That&amp;rsquo;s why the most important part of such systems is a discovery. If peers can&amp;rsquo;t find each other, it&amp;rsquo;s useless.
The first problem is to build a messenger app, that can discover the same apps in the network and securely communicate with each other.</description>
    </item>
    
    <item>
      <title>Golang: Data races</title>
      <link>https://galaiko.rocks/posts/blog/go-data-races/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/go-data-races/</guid>
      <description>I have noticed that many people who have started using go have troubles when it comes to concurrent programming. Concurrency in go is indeed the most complicated part of the language, especially for people who don&amp;rsquo;t have much experience working with it. There are no compile time validations to prevent a programmer from creating race conditions, but go provides all the needed tools and instruments to avoid it.
I will try to explain what is a race condition, why does it happen and how to avoid it.</description>
    </item>
    
    <item>
      <title>Optimizing a function</title>
      <link>https://galaiko.rocks/posts/blog/optimizing-functions/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/optimizing-functions/</guid>
      <description>In the golang community slack, someone shared a link to a package used to validate Swedish personnumer. Personnumer is a swedish version of an ID, and its format is well defined:
 First 6 or 8 digits is a birthrate with or without a century. Last four digits are random secret digits. The whole number satisfies the Luhn algorithm. Birthdate and secret digits can be divided with - or +.  For example 19900101-0017</description>
    </item>
    
    <item>
      <title>Selfhosted RaspberryPI based Docker Swarm Cluster</title>
      <link>https://galaiko.rocks/posts/blog/cluster/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/cluster/</guid>
      <description>Introduction I am renting virtual servers for a long time now to host different personal projects, including this website. I tried all of them: AWS, Google Cloud, DigitalOcean , Azure, and I was entirely satisfied with them until two weeks ago. Two weeks ago I came across the [article](https://medium.com/@bossjones/how-i-setup-a-raspberry -pi-3-cluster-using-the-new-docker-swarm-mode-in-29-minutes-aa0e4f3b1768) where the guy described how easy is to set up a RaspberryPI cluster powered by Docker Swarm. This idea seemed exciting to me, so I ordered all the equipment and spent some time to set it up and move most of the services from DigitalOcean servers to my living room.</description>
    </item>
    
    <item>
      <title>Internet privacy starter pack</title>
      <link>https://galaiko.rocks/posts/blog/privacy/</link>
      <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/privacy/</guid>
      <description>About a month ago I began using some systems to protect my security on the internet a bit more than nothing.
PiHole It started when someone shared a link to the PiHole on Twitter. It is a self-hosted DNS service that is designed for RaspberryPi for blocking advertisements and trackers on the DNS level.
Turns out, about 20% of queries I make are blocked, and it doesn&amp;rsquo;t hurt daily usage at all.</description>
    </item>
    
    <item>
      <title>Docker compose for managing personal server</title>
      <link>https://galaiko.rocks/posts/blog/docker-compose-server-manegement/</link>
      <pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/docker-compose-server-manegement/</guid>
      <description>For a long time, I tried to find the most comfortable way to manage a server where I host something for myself, some kind of DevOps framework. And I think I found the best way so far.
Since most of the times things I want to host are useless and I often change my mind, there are several requirements for it:
  Easy to add/remove new components.
Let&amp;rsquo;s say I created a website, and a couple of days later I added a DNS server on the same host, and then I went to Russia, so I also need to host VPN.</description>
    </item>
    
    <item>
      <title>Half a year with vim</title>
      <link>https://galaiko.rocks/posts/blog/half-a-year-with-vim/</link>
      <pubDate>Sat, 21 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/blog/half-a-year-with-vim/</guid>
      <description>I started using vim because I was bored. Likely, I code in go, so it’s pretty easy to switch. I mean, I tried to do Java with vim for about a week - and it’s a hell. So if your primary language requires massive IDE support, it’s not an option to completely switch to vim.
After slightly more than half a year of usage, I improved typing, navigation speed, and general comfort while I code.</description>
    </item>
    
    <item>
      <title>Daily Coding Problem</title>
      <link>https://galaiko.rocks/posts/dcp/intro/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://galaiko.rocks/posts/dcp/intro/</guid>
      <description>Recently found this website Daily Coding Problem, where you can subscribe to a newsletter and get one problem a day.
For a long time, I wanted to start solving problems from leetcode to keep fit, but could never begin.
Also, for a long time, I wanted to start a blog, but could never begin.
Writing short articles about how I solve thus problems seems for me as an excellent opportunity to start doing both, so every day I will publish my solution for the daily problem here, and to my GitHub page trying to explain why and how I solved it.</description>
    </item>
    
  </channel>
</rss>
